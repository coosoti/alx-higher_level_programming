How to use say_my_name.py
=========================

The function say_my_name() will display my name is <first name> <last name>. <last name is
optional.

Importing the function from the module:
	  >>> say_my_name = __import__("3-say_my_name").say_my_name

Checking for module docstring:
	 >>> module_doc = __import__("3-say_my_name").__doc__
	 >>> len(module_doc) > 1
	 True

Checking for function docstring:
	 >>> func_doc = __import__("3-say_my_name").say_my_name.__doc__
	 >>> len(func_doc) > 1
	 True

Checking for regular use:
	 >>> say_my_name("Charles", "Osoti")
	 My name is Charles Osoti
	 >>> say_my_name("John", "Jane Doe")
	 My name is John Jane Doe

Checking for passing None as a first name:
	 >>> say_my_name(None, "Osoti")
	 Traceback (most recent call last):
         ...
         TypeError: first_name must be a string

Checking for passing None as last name:
	 >>> say_my_name("Charles", None)
	 Traceback (most recent call last):
         ...
         TypeError: last_name must be a string

Checking for wrong type as first name:
         >>> say_my_name(1, "Osoti")
         Traceback (most recent call last):
         ...
         TypeError: first_name must be a string

Checking for wrong type as last name:
         >>> say_my_name("Charles", [4])
         Traceback (most recent call last):
         ...
         TypeError: last_name must be a string

Checking for when more than 2 args are passed:
	 >>> say_my_name("Charles", "Osoti", "Victor")
	 Traceback (most recent call last):
	 ...
	 TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given
