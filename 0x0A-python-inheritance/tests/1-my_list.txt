How to use 1-my_list module
===========================

Importing the class from the modude:
	  >>> MyList = __import__("1-my_list").MyList

Checking for module docstring:
	 >>> module_doc = __import__("1-my_list").__doc__
	 >>> len(module_doc) > 1
	 True

Checking for class docstring:
	 >>> class_doc = __import__("1-my_list").MyList.__doc__
	 >>> len(class_doc) > 1
	 True

checking for function/method docstring:
	 >>> method_doc = __import__("1-my_list").MyList.print_sorted.__doc__
	 >>> len(method_doc) > 1
	 True

Checking that MyList class inherits from the python class list:
	 >>> issubclass(MyList, list)
	 True

Checking for an empty list:
	 >>> my_list = MyList()
	 >>> my_list.print_sorted()
	 []

Checking for append method:
	 >>> my_list.append(1)
	 >>> my_list.append(2)
	 >>> my_list.append(3)
	 >>> my_list.append(4)
	 >>> my_list.append(5)
	 >>> my_list.append(6)
	 >>> print(my_list)
	 [1, 2, 3, 4, 5, 6]

Checking for already sorted:
	 >>> my_list.print_sorted()
	 [1, 2, 3, 4, 5, 6]


Checking for one negative number in the list:
	 >>> my_list.append(-1)
	 >>> print(my_list)
	 [1, 2, 3, 4, 5, 6, -1]
	 >>> my_list.print_sorted()
	 [-1, 1, 2, 3, 4, 5, 6]

Checking for all negative numbers:
	 >>> my_list = MyList()
	 >>> my_list.append(-10)
	 >>> my_list.append(-1)
	 >>> my_list.append(-7)
	 >>> my_list.append(-2)
	 >>> my_list.append(-8)
	 >>> print(my_list)
	 [-10, -1, -7, -2, -8]
	 >>> my_list.print_sorted()
	 [-10, -8, -7, -2, -1]
	 >>> print(my_list)
         [-10, -1, -7, -2, -8]

Checking for too many arguments:
	 >>> my_list.print_sorted(1)
	 Traceback (most recent call last):
	 ...
	 TypeError: print_sorted() takes 1 positional argument but 2 were given
